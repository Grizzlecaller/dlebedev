1. Что такое ООП?

Парадигма программирования, в которой основными концепциями являются понятия объектов и классов.

2. Базовые концепции ООП?

класс, объект, интерфейс, абстракция, инкапсуляция, наследование и полиморфизм

3. Укажите из каких элементов состоит класс.

Класс состоит из набора данных (полей, атрибутов, членов класса) и функций для работы с ними (методов).

4. Что такое конструктор? Типы конструкторов?

Конструктор инициализирует объект непосредственно во время его создания.

- Конструктор определенный явно (параметризированный)
- Конструктор по умолчанию

5. Можно ли наследовать конструктор?

в Java конструкторы не являются полями или методами, поэтому они не наследуются подклассом,
но конструктор суперкласса может быть вызван из подкласса.

6. Что такое перегрузка конструктора?

Объявление конструктора с именем конструктора по умолчанию и отличающимся принимаемыми параметрами

7. Что такое статический метод?

Это метод, который доступен до создания любых объектов его класса и без ссылки на какой-нибудь объект.
Обозначается ключевым словом static
Ограничения:
- может вызывать только статические методы
- доступны только статические переменные
- не могут делать ссылки типа this или super

8. Что такое не статический метод?

Метод доступен после создания объектов его класса

9. Для чего используется ключевое слово this?

Используется для ссылки на объект, для которого вызван метод.

10. Какой класс является базовый родительским классом для всех классов?

Oblect class

11. Что такое наследование? Приведите примеры из реальной жизни.

Наследование — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью.
Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником или производным классом.
Породы животных, модели техники (телефоны, кофеварки)

12. Опишите процесс создания нового объекта.

Объявление класса -> опертор new

class One {
    int a;
}

class Two {
    One oneNew = new One();
}

13. Как вызвать метод из родительского класса?

class Calc {
    int a;
    public int add(int b, int c) {
        return b + c;
    }
}
public class subCalc extends Calc {
    subCalc testCalc = new subCalc;
    testCalc.add(3, 2);
}

14. Что такое переопределение метода?

Замена реализации метода в суперклассе, реализацией из подкласса
@Override

15. Можно ли переопределить статический метод?

Нет, т.к. это будут 2 разных метода

16. Что такое виртуальная функция и используются ли они в Java?

Виртуальная функция (метод) позволяет сздавать общиий код, который может работать как с объектами базового класса, так
и с объектами любого его подкласса.
В Java все методы являются виртуальными.

17. Что такое перегрузка метода?

Определять в одном и том же классе два или более метода с одним именем.
Перегружаемые методы должны отличаться по типу и/или количеству их параметров.

18. Можно ли изменить тип возвращаемых тип данных при перегрузке метода?

Можно, но это не имеет значения, т.к. возвращаемый тип не влияет на поиск перегружаемого варианта метода

19. Что такое множественное наследование? Как его можно реализовать в Java.

Java не поддерживает множественное наследование.
НО! класс может реализовать больше одного интерфейса.

20. Что такое полиморфизм? Приведите примеры из реальной жизни.

Полиморфизм - это способность программы одинаково использовать объекты с идентичным интерфейсом без информации о
конкретном типе этого объекта.
Возможность использовать не только объекты типа, который мы назначили при объявлении, но и его наследников.

21. Что такое инкапсуляция?

Инкапсуляция — это свойство системы, позволяющее объединить данные и методы, работающие с ними в классе, и скрыть детали реализации от пользователя.

22. Как реализована инкапсуляция в Java?

Инкапсуляция реализована через модификаторы доступа:
public - публичный, доступный всем
default - видны в пределах package
protected - как default + классы наследники
private - Такие данные видны только самому классу

Геттеры и сеттеры

23. Что такое абстракция?

Методы, которые требуют переопределения, называются абстрактными.
Если класс содержит хотя бы один абстрактный метод, то он тоже является абстрактным.

-24. Как реализована абстракция в Java?

25. Что такое интерфейс?

Интерфейс – это набор методов класса, доступных для использования другими классами.
Интерфейсы в Java компенсируют отсутствие множественного наследования классов.
В имплементирующем интерфейс классе должны быть реализованы все предусмотренные интерфейсом методы

26. Что такое внутренний класс? Типы внутренних классов.

Внутренним называется класс, определенный в другом классе.

- Объект внутреннего класса имеет доступ к данным объекта, в котором он определен, включая закрытые данные
- Внутренний класс можно скрыть от других классов того же пакета

Типы:
-Локальный (не объявляются с помощью модификаторов доступа, область действия ограничена блоком в котором он объявлен)
-Анонимный (Если требуется создать единственный объект класса, то можно не присваивать имя. Не имеет конструктора,
 т.к. имя конструктора должно совпадать и именем класса. Параметры  необходимые для создания объекта передаются
 конструктору суперкласса)
-Статический (применяется в случае когда доступ к объекту внутреннего класса не требуется)

27. Что такое анонимный класс.

Локальный класс без имени. Наследует какой-то класс, или имплиментирует какой-то интерфейс.

Из него видны:
— все (даже private) свойства и методы OuterClassа обычные и статические.
— public и protected свойства и методы родителя OuterClassа обычные и статические. То есть те, которые видны в OuterClassе.

Его видно:
— только в том методе где он определён.

Не может быть наследован

Может содержать:
— только обычные свойства и методы (не статические).

28. Для чего используется конструктор в абстрактном классе?

Нельзя создать экземпляр абстрактного класса напрямую.
Нужно использовать класс наследник или анонимный класс.

29. Можно ли создать анонимный класс. если в классе нет конструктора по умолчанию?

Если нет конструктора по умолчанию, значит есть конструктор который определили.
Ответ можно.

30. Что такое композиция?

Композиция - тоже что и агрегация, но более сильный вид связи между классами/объектами,
при котором контроль за жизненным циклом агрегируемого объекта выполняется непосредственно
полностью внутри класса где он используется.

31. Что такое агрегация?

Композиция — еще более «жесткое отношение, когда объект не только является частью другого объекта,
но и вообще не может принадлежат еще кому-то.
Например Машина и Двигатель.
Хотя двигатель может быть и без машины, но он вряд ли сможет быть в двух или трех машинах одновременно.

32. Какие типы исключительных ситуаций бывают?

 - RuntimeException
 - Error

33. Как обрабатываются исключительные ситуации?

В Java есть пять ключевых слов для работы с исключениями:
try — данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.
catch — ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений.
finally — ключевое слово для отметки начала блока кода, которой является дополнительным. Этот блок помещается после последнего блока ‘catch’.
Управление обычно передаётся в блок ‘finally’ в любом случае.
throw — служит для генерации исключений.
throws — ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может выбросить исключение с указанным типом.

34. Назовите основные методы класса Object?
 - Object clone() - создаёт новый объект, не отличающий от клонируемого
 - boolean equals(Object obj) - определяет, равен ли один объект другому
 - void finalize() - вызывается перед удалением неиспользуемого объекта
 - Class<?> getClass() - получает класс объекта во время выполнения
 - int hashCode() - возвращает хеш-код, связанный с вызывающим объектом
 - void notify() - возобновляет выполнение потока, который ожидает вызывающего объекта
 - void notifyAll() - возобновляет выполнение всех потоков, которые ожидают вызывающего объекта
 - String toString() - возвращает строку, описывающий объект
 - void wait() - ожидает другого потока выполнения
 - void wait(long millis) - ожидает другого потока выполнения
 - void wait(long millis, int nanos) - ожидает другого потока выполнения